// login original : 
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import 'bootstrap/dist/css/bootstrap.min.css';

const Login = ({ onLogin }) => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleSubmit = (e) => {
    e.preventDefault();
    // Logique d'authentification simple pour l'exemple
    if (username === 'admin' && password === 'admin') {
      onLogin();
      navigate('/');
    } else {
      setError('Identifiants incorrects');
    }
  };

  return (
    <div className="container-fluid vh-100 bg-light">
      <div className="row h-100 justify-content-center align-items-center">
        <div className="col-md-6 col-lg-4">
          <div className="card shadow-lg">
            <div className="card-header bg-primary text-white">
              <h3 className="text-center mb-0">Connexion</h3>
            </div>
            <div className="card-body p-4">
              <form onSubmit={handleSubmit}>
                {error && (
                  <div className="alert alert-danger" role="alert">
                    {error}
                  </div>
                )}
                <div className="mb-3">
                  <label htmlFor="username" className="form-label">
                    Nom d'utilisateur
                  </label>
                  <input
                    type="text"
                    className="form-control form-control-lg"
                    id="username"
                    value={username}
                    onChange={(e) => setUsername(e.target.value)}
                    placeholder="Entrez votre nom d'utilisateur"
                    required
                  />
                </div>
                <div className="mb-4">
                  <label htmlFor="password" className="form-label">
                    Mot de passe
                  </label>
                  <input
                    type="password"
                    className="form-control form-control-lg"
                    id="password"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    placeholder="Entrez votre mot de passe"
                    required
                  />
                </div>
                <button type="submit" className="btn btn-primary btn-lg w-100">
                  Se connecter
                </button>
              </form>
              <div className="text-center mt-3">
                <a href="#forgot-password" className="text-decoration-none">
                  Mot de passe oublié ?
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Login;

// app.jsx original::



import React, { Suspense, useState } from 'react';
import { BrowserRouter as Router, Route, Routes, Link, Navigate } from 'react-router-dom';
import 'bootstrap/dist/css/bootstrap.min.css';
import { FiBarChart2, FiBell, FiLogOut, FiMenu } from 'react-icons/fi';

// Composants chargés de manière paresseuse
const StockDashboard = React.lazy(() => import('./components/StockDashboard'));
const Mouvement = React.lazy(() => import('./components/Mouvement'));
const Login = React.lazy(() => import('./components/Login'));
const StockUpdate = React.lazy(() =>  import('./components/StockUpdate'))

const ErrorBoundary = ({ children }) => {
  const [hasError, setHasError] = React.useState(false);

  React.useEffect(() => {
    const errorHandler = (error) => {
      console.error('Error caught:', error);
      setHasError(true);
    };
    window.addEventListener('error', errorHandler);
    return () => window.removeEventListener('error', errorHandler);
  }, []);

  if (hasError) {
    return <div className="alert alert-danger m-4">Une erreur est survenue.</div>;
  }

  return children;
};

const ProtectedRoute = ({ isAuthenticated, children }) => {
  if (!isAuthenticated) {
    return <Navigate to="/login" replace />;
  }
  return children;
};

const Layout = ({ children, handleLogout }) => {
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);

  return (
    <div className="container-fluid">
      <div className="row">
        {/* Sidebar */}
        <div className={`col-md-3 col-lg-2 d-md-block bg-dark sidebar ${sidebarCollapsed ? 'collapsed' : ''}`}
             style={{ minHeight: '100vh', transition: 'all 0.3s' }}>
          <div className="position-sticky pt-3">
            <div className="d-flex justify-content-between align-items-center px-3 mb-4">
              {!sidebarCollapsed && <span className="fs-4 text-white">H-Stock</span>}
              <button 
                className="btn btn-link text-white"
                onClick={() => setSidebarCollapsed(!sidebarCollapsed)}
              >
                <FiMenu size={20} />
              </button>
            </div>
            <ul className="nav flex-column">
              <li className="nav-item">
                <Link to="/" className="nav-link text-white d-flex align-items-center">
                  <FiBarChart2 className="me-2" />
                  {!sidebarCollapsed && <span>Dashboard</span>}
                </Link>
              </li>
              <li className="nav-item">
                <Link to="/Mouvement" className="nav-link text-white d-flex align-items-center">
                  <FiBell className="me-2" />
                  {!sidebarCollapsed && <span>Alertes</span>}
                </Link>
              </li>
              <li className="nav-item">
                <Link to="/StockUpdate " className="nav-link text-white d-flex align-items-center">
                  <FiBell className="me-2" />
                  {!sidebarCollapsed && <span>Historique</span>}
                </Link>
              </li>
              <li className="nav-item mt-4">
                <button 
                  onClick={handleLogout} 
                  className="btn btn-link nav-link text-white d-flex align-items-center"
                >
                  <FiLogOut className="me-2" />
                  {!sidebarCollapsed && <span>Déconnexion</span>}
                </button>
              </li>
            </ul>
          </div>
        </div>

        {/* Main content */}
        <main className={`col-md-9 ms-sm-auto col-lg-10 px-md-4 ${sidebarCollapsed ? 'col-md-12' : ''}`}>
          <div className="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
            <button 
              className="btn btn-outline-secondary d-md-none me-2" 
              onClick={() => setSidebarCollapsed(!sidebarCollapsed)}
            >
              <FiMenu />
            </button>
            <h1 className="h2">H-Stock</h1>
          </div>
          {children}
        </main>
      </div>
    </div>
  );
};

const App = () => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  const handleLogin = () => {
    setIsAuthenticated(true);
  };

  const handleLogout = () => {
    setIsAuthenticated(false);
  };

  return (
    <Router>
      <ErrorBoundary>
        <Suspense fallback={<div className="text-center my-5">Chargement en cours...</div>}>
          <Routes>
            <Route path="/login" element={<Login onLogin={handleLogin} />} />
            <Route path="/*" element={
              <ProtectedRoute isAuthenticated={isAuthenticated}>
                <Layout handleLogout={handleLogout}>
                  <Routes>
                    <Route path="/" element={<StockDashboard />} />
                    <Route path="/Mouvement" element={<Mouvement />} />
                    <Route path="/StockUpdate" element={<StockUpdate />} />
                  </Routes>
                </Layout>
              </ProtectedRoute>
            } />
          </Routes>
        </Suspense>
      </ErrorBoundary>
    </Router>
  );
};

export default App;